package parse

// Emitter returns a Result
type Emitter func() Result

// AnyOf returns a Parser, the result of which is generated by
// attempting the provided Parsers in succession. The first Parser that
// returns a Success ends the processing, and its Success instance is
// returned
func AnyOf(parsers ...Parser) Parser {
	return func(i Input) (*Success, *Failure) {
		var s *Success
		var f *Failure
		for _, p := range parsers {
			if s, f = p(i); s != nil {
				return s, nil
			}
		}
		return nil, f
	}
}

// Optional returns a new Parser that will DefaultTo nil if the match
// is not successful
func Optional(p Parser) Parser {
	return DefaultTo(p, func() Result {
		return nil
	})
}

// DefaultTo returns a new Parser that will return the Result provided
// by the Emitter if the match is not successful
func DefaultTo(p Parser, missing Emitter) Parser {
	return func(i Input) (*Success, *Failure) {
		if s, f := p(i); f == nil {
			return s, nil
		}
		return i.succeedWith(missing())
	}
}

// Ignore returns a new Parser, the result of which is ignored if
// matching is successful
func Ignore(p Parser) Parser {
	return p.Map(func(_ Result) Result {
		return Skip
	})
}
