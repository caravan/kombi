package parse

type (
	// Parser is the signature for a parsing node
	Parser func(Input) (*Success, *Failure)

	// Success is the structure returned if the Parser is able to
	// successfully match its Input. Remaining is what remains unparsed
	// from the original Input value
	Success struct {
		Result
		Remaining Input
	}

	// Failure is the structure returned if the Parser is not able to
	// successfully match its Input
	Failure struct {
		Error error
		Input
	}
)

// Parse uses the current Parser to match the provided string
func (p Parser) Parse(s string) (*Success, *Failure) {
	return p(Input(s))
}

// Bind returns a new Parser, the Result of which is based on the Result
// of this Parser being Combined with the Result of the Parser returned
// by the provided Binder
func (p Parser) Bind(b Binder) Parser {
	return Bind(p, b)
}

// Map returns a new Parser, the Result of which is a value generated
// by the provided Mapper
func (p Parser) Map(fn Mapper) Parser {
	return Map(p, fn)
}

// Then returns a new Parser based on the Result of this Parser
// being Combined with the results of the other Parser
func (p Parser) Then(other Parser) Parser {
	return Then(p, other)
}

// Or returns a new Parser based on either the successful Result of
// this Parser or the Result of the other Parser
func (p Parser) Or(other Parser) Parser {
	return Or(p, other)
}

// Optional returns a new Parser that will DefaultTo nil if the match
// is not successful
func (p Parser) Optional() Parser {
	return Optional(p)
}

// DefaultTo returns a new Parser that will return the Result provided
// by the Emitter if the match is not successful
func (p Parser) DefaultTo(e Emitter) Parser {
	return DefaultTo(p, e)
}

// Ignore returns a new Parser, the result of which is ignored if
// matching is successful
func (p Parser) Ignore() Parser {
	return Ignore(p)
}

// Combine returns a new Parser, the Result of which is a value
// generated by passing any Combined results to the provided Combiner
func (p Parser) Combine(fn Combiner) Parser {
	return Combine(p, fn)
}

// OneOrMore returns a new Parser, the Result of which is the Combined
// set of values matched by the provided Parser being performed one or
// more times
func (p Parser) OneOrMore() Parser {
	return OneOrMore(p)
}

// ZeroOrMore returns a new Parser, the Result of which is the Combined
// set of values matched by the provided Parser being performed zero or
// more times
func (p Parser) ZeroOrMore() Parser {
	return ZeroOrMore(p)
}
